package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate joinPredicate;
    private DbIterator childIt1;
    private DbIterator childIt2;
    private TupleDesc tupleDesc;
    private Tuple item1;
    // merge tuples with same field
    private HashMap<Field, ArrayList<Tuple>> child2Map;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     *
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.joinPredicate = p;
        this.childIt1 = child1;
        this.childIt2 = child2;
        this.tupleDesc = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
        this.child2Map = new HashMap<>();
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return joinPredicate;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
        return tupleDesc;
    }

    public String getJoinField1Name()
    {
        // some code goes here
    	return childIt1.getTupleDesc().getFieldName(joinPredicate.getField1());
    }

    public String getJoinField2Name()
    {
        // some code goes here
        return childIt2.getTupleDesc().getFieldName(joinPredicate.getField2());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        childIt1.open();
        childIt2.open();
        while (childIt2.hasNext()) {
            Tuple item2 = childIt2.next();
            Field toPutKey = item2.getField(joinPredicate.getField2());
            ArrayList<Tuple> val = child2Map.get(toPutKey);
            if (val == null)
                child2Map.put(toPutKey, new ArrayList<>(Collections.singletonList(item2)));
            else
                val.add(item2);
        }
        childIt2.close();
        item1 = (childIt1.hasNext()) ? childIt1.next() : null;
    }

    public void close() {
        // some code goes here
        super.close();
        childIt1.close();
        childIt2.close();
        item1 = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        childIt1.rewind();
        childIt2.rewind();
    }

    transient Iterator<Tuple> listIt = null;
    ArrayList<Tuple> curList = null;


    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if (listIt != null) {
            // there is a list to iterate
            if (listIt.hasNext())
                return listIt.next();
        }
        // we need to create a new list
        curList = null;
        listIt = null;

        if (item1 == null) // item1 is the current item in childIt1
            return null;

        do {
            Field query = item1.getField(joinPredicate.getField1());
            ArrayList<Tuple> toJoinList = child2Map.getOrDefault(query, null);
            if (toJoinList != null) {
                curList = new ArrayList<>();
                toJoinList.forEach(item2 -> {
                    boolean add = curList.add(Tuple.merge(item1, item2));
                });
                listIt = curList.iterator();
                item1 = (childIt1.hasNext()) ? childIt1.next() : null;
                return fetchNext();
            }
            item1 = (childIt1.hasNext()) ? childIt1.next() : null;
        } while (item1 != null);
        return null;
    }


    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator[]{childIt1, childIt2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        assert children.length == 2;
        childIt1 = children[0];
        childIt2 = children[1];
    }

}
